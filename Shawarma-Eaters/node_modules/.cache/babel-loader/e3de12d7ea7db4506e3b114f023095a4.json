{"ast":null,"code":"import * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ThemeContext =\n/*#__PURE__*/\nReact.createContext({\n  prefixes: {}\n});\nconst Consumer = ThemeContext.Consumer,\n      Provider = ThemeContext.Provider;\n\nfunction ThemeProvider({\n  prefixes = {},\n  dir,\n  children\n}) {\n  const contextValue = useMemo(() => ({\n    prefixes: { ...prefixes\n    },\n    dir\n  }), [prefixes, dir]);\n  return (\n    /*#__PURE__*/\n    _jsx(Provider, {\n      value: contextValue,\n      children: children\n    })\n  );\n}\n\nexport function useBootstrapPrefix(prefix, defaultPrefix) {\n  const _useContext = useContext(ThemeContext),\n        prefixes = _useContext.prefixes;\n\n  return prefix || prefixes[defaultPrefix] || defaultPrefix;\n}\nexport function useIsRTL() {\n  const _useContext2 = useContext(ThemeContext),\n        dir = _useContext2.dir;\n\n  return dir === 'rtl';\n}\n\nfunction createBootstrapComponent(Component, opts) {\n  if (typeof opts === 'string') opts = {\n    prefix: opts\n  };\n  const isClassy = Component.prototype && Component.prototype.isReactComponent; // If it's a functional component make sure we don't break it with a ref\n\n  const _opts = opts,\n        prefix = _opts.prefix,\n        _opts$forwardRefAs = _opts.forwardRefAs,\n        forwardRefAs = _opts$forwardRefAs === void 0 ? isClassy ? 'ref' : 'innerRef' : _opts$forwardRefAs;\n  const Wrapped =\n  /*#__PURE__*/\n  React.forwardRef(({ ...props\n  }, ref) => {\n    props[forwardRefAs] = ref;\n    const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);\n    return (\n      /*#__PURE__*/\n      _jsx(Component, { ...props,\n        bsPrefix: bsPrefix\n      })\n    );\n  });\n  Wrapped.displayName = \"Bootstrap(\".concat(Component.displayName || Component.name, \")\");\n  return Wrapped;\n}\n\nexport { createBootstrapComponent, Consumer as ThemeConsumer };\nexport default ThemeProvider;","map":null,"metadata":{},"sourceType":"module"}