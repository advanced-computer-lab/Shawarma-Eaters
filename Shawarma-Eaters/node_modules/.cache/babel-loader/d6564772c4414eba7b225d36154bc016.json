{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport Feedback from './Feedback';\nimport FormCheckInput from './FormCheckInput';\nimport FormCheckLabel from './FormCheckLabel';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst FormCheck =\n/*#__PURE__*/\nReact.forwardRef(({\n  id,\n  bsPrefix,\n  bsSwitchPrefix,\n  inline = false,\n  disabled = false,\n  isValid = false,\n  isInvalid = false,\n  feedbackTooltip = false,\n  feedback,\n  feedbackType,\n  className,\n  style,\n  title = '',\n  type = 'checkbox',\n  label,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as = 'input',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check');\n  bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, 'form-switch');\n\n  const _useContext = useContext(FormContext),\n        controlId = _useContext.controlId;\n\n  const innerFormContext = useMemo(() => ({\n    controlId: id || controlId\n  }), [controlId, id]);\n  const hasLabel = label != null && label !== false && !children;\n\n  const input =\n  /*#__PURE__*/\n  _jsx(FormCheckInput, { ...props,\n    type: type === 'switch' ? 'checkbox' : type,\n    ref: ref,\n    isValid: isValid,\n    isInvalid: isInvalid,\n    disabled: disabled,\n    as: as\n  });\n\n  return (\n    /*#__PURE__*/\n    _jsx(FormContext.Provider, {\n      value: innerFormContext,\n      children:\n      /*#__PURE__*/\n      _jsx(\"div\", {\n        style: style,\n        className: classNames(className, label && bsPrefix, inline && \"\".concat(bsPrefix, \"-inline\"), type === 'switch' && bsSwitchPrefix),\n        children: children ||\n        /*#__PURE__*/\n        _jsxs(_Fragment, {\n          children: [input, hasLabel &&\n          /*#__PURE__*/\n          _jsx(FormCheckLabel, {\n            title: title,\n            children: label\n          }), feedback &&\n          /*#__PURE__*/\n          _jsx(Feedback, {\n            type: feedbackType,\n            tooltip: feedbackTooltip,\n            children: feedback\n          })]\n        })\n      })\n    })\n  );\n});\nFormCheck.displayName = 'FormCheck';\nexport default Object.assign(FormCheck, {\n  Input: FormCheckInput,\n  Label: FormCheckLabel\n});","map":null,"metadata":{},"sourceType":"module"}