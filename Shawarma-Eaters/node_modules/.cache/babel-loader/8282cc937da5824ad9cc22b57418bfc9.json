{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * This function create an object from keys, value and then assign to target\n *\n * @param {Object} obj : the target object to be assigned\n * @param {string[]} keys\n * @param {string | number} value\n *\n * @example\n * const source = {}\n * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }\n *\n * @example\n * const source = { palette: { primary: 'var(--palette-primary)' } }\n * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }\n */\n\nexport const assignNestedKeys = (obj, keys, value) => {\n  let temp = obj;\n  keys.forEach((k, index) => {\n    if (index === keys.length - 1) {\n      if (temp && typeof temp === 'object') {\n        temp[k] = value;\n      }\n    } else if (temp && typeof temp === 'object') {\n      if (!temp[k]) {\n        temp[k] = {};\n      }\n\n      temp = temp[k];\n    }\n  });\n};\n/**\n *\n * @param {Object} obj : source object\n * @param {Function} callback : a function that will be called when\n *                   - the deepest key in source object is reached\n *                   - the value of the deepest key is NOT `undefined` | `null`\n *\n * @example\n * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)\n * // ['palette', 'primary', 'main'] '#000000'\n */\n\nexport const walkObjectDeep = (obj, callback) => {\n  function recurse(object, parentKeys = []) {\n    Object.entries(object).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        if (typeof value === 'object' && Object.keys(value).length > 0) {\n          recurse(value, [...parentKeys, key]);\n        } else {\n          callback([...parentKeys, key], value, object);\n        }\n      }\n    });\n  }\n\n  recurse(obj);\n};\n\nconst getCssValue = (keys, value) => {\n  if (typeof value === 'number') {\n    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {\n      // CSS property that are unitless\n      return value;\n    }\n\n    return \"\".concat(value, \"px\");\n  }\n\n  return value;\n};\n/**\n * a function that parse theme and return { css, vars }\n *\n * @param {Object} theme\n * @param {{\n *  prefix?: string,\n *  basePrefix?: string,\n *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean\n * }} options.\n *  `basePrefix`: defined by design system.\n *  `prefix`: defined by application\n *\n *   This function also mutate the string value of theme input by replacing `basePrefix` (if existed) with `prefix`\n *\n * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme)\n *\n * @example\n * const { css, vars } = parser({\n *   fontSize: 12,\n *   lineHeight: 1.2,\n *   palette: { primary: { 500: '#000000' } }\n * })\n *\n * console.log(css) // { '--fontSize': '12px', '--lineHeight': 1.2, '--palette-primary-500': '#000000' }\n * console.log(vars) // { fontSize: '--fontSize', lineHeight: '--lineHeight', palette: { primary: { 500: 'var(--palette-primary-500)' } } }\n */\n\n\nexport default function cssVarsParser(theme, options) {\n  const clonedTheme = _extends({}, theme);\n\n  delete clonedTheme.vars; // remove 'vars' from the structure\n\n  const _ref = options || {},\n        prefix = _ref.prefix,\n        _ref$basePrefix = _ref.basePrefix,\n        basePrefix = _ref$basePrefix === void 0 ? '' : _ref$basePrefix,\n        shouldSkipGeneratingVar = _ref.shouldSkipGeneratingVar;\n\n  const css = {};\n  const vars = {};\n  walkObjectDeep(clonedTheme, (keys, val, scope) => {\n    if (typeof val === 'string' || typeof val === 'number') {\n      let value = val;\n\n      if (typeof value === 'string' && value.startsWith('var')) {\n        // replace the value of the `scope` object with the prefix or remove basePrefix from the value\n        value = prefix ? value.replace(basePrefix, prefix) : value.replace(\"\".concat(basePrefix, \"-\"), ''); // scope is the deepest object in the tree, keys is the theme path keys\n\n        scope[keys.slice(-1)[0]] = value;\n      }\n\n      if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys, value)) {\n        // only create css & var if `shouldSkipGeneratingVar` return false\n        const cssVar = \"--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(keys.join('-'));\n        Object.assign(css, {\n          [cssVar]: getCssValue(keys, value)\n        });\n        assignNestedKeys(vars, keys, \"var(\".concat(cssVar, \")\"));\n      }\n    }\n  });\n  return {\n    css,\n    vars\n  };\n}","map":null,"metadata":{},"sourceType":"module"}