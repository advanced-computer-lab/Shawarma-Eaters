{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\This is My file\\\\ACL Task\\\\Project\\\\Shawarma-Eaters\\\\Shawarma-Eaters\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\This is My file\\\\ACL Task\\\\Project\\\\Shawarma-Eaters\\\\Shawarma-Eaters\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const spans = [];\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      span = propValue.span;\n      offset = propValue.offset;\n      order = propValue.order;\n    } else {\n      span = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? \"-\".concat(brkPoint) : '';\n    if (span) spans.push(span === true ? \"\".concat(bsPrefix).concat(infix) : \"\".concat(bsPrefix).concat(infix, \"-\").concat(span));\n    if (order != null) classes.push(\"order\".concat(infix, \"-\").concat(order));\n    if (offset != null) classes.push(\"offset\".concat(infix, \"-\").concat(offset));\n  });\n  return [{ ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col =\n/*#__PURE__*/\nReact.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const _useCol = useCol(props),\n        _useCol2 = _slicedToArray(_useCol, 2),\n        _useCol2$ = _useCol2[0],\n        className = _useCol2$.className,\n        colProps = _objectWithoutProperties(_useCol2$, [\"className\"]),\n        _useCol2$2 = _useCol2[1],\n        _useCol2$2$as = _useCol2$2.as,\n        Component = _useCol2$2$as === void 0 ? 'div' : _useCol2$2$as,\n        bsPrefix = _useCol2$2.bsPrefix,\n        spans = _useCol2$2.spans;\n\n  return (\n    /*#__PURE__*/\n    _jsx(Component, { ...colProps,\n      ref: ref,\n      className: classNames(className, !spans.length && bsPrefix)\n    })\n  );\n});\nCol.displayName = 'Col';\nexport default Col;","map":null,"metadata":{},"sourceType":"module"}