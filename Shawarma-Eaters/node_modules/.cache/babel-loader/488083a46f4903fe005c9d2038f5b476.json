{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"anchorOrigin\", \"classes\", \"badgeContent\", \"component\", \"children\", \"className\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"overlap\", \"showZero\", \"variant\", \"theme\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize, usePreviousProps } from '@mui/utils';\nimport isHostComponent from '../utils/isHostComponent';\nimport composeClasses from '../composeClasses';\nimport { getBadgeUtilityClass } from './badgeUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const variant = ownerState.variant,\n        anchorOrigin = ownerState.anchorOrigin,\n        overlap = ownerState.overlap,\n        invisible = ownerState.invisible,\n        classes = ownerState.classes;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', variant, \"anchorOrigin\".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal)).concat(capitalize(overlap)), invisible && 'invisible']\n  };\n  return composeClasses(slots, getBadgeUtilityClass, classes);\n};\n\nconst BadgeUnstyled =\n/*#__PURE__*/\nReact.forwardRef(function BadgeUnstyled(props, ref) {\n  const _props$anchorOrigin = props.anchorOrigin,\n        anchorOriginProp = _props$anchorOrigin === void 0 ? {\n    vertical: 'top',\n    horizontal: 'right'\n  } : _props$anchorOrigin,\n        classesProp = props.classes,\n        badgeContentProp = props.badgeContent,\n        _props$component = props.component,\n        component = _props$component === void 0 ? 'span' : _props$component,\n        children = props.children,\n        className = props.className,\n        _props$components = props.components,\n        components = _props$components === void 0 ? {} : _props$components,\n        _props$componentsProp = props.componentsProps,\n        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n        invisibleProp = props.invisible,\n        _props$max = props.max,\n        maxProp = _props$max === void 0 ? 99 : _props$max,\n        _props$overlap = props.overlap,\n        overlapProp = _props$overlap === void 0 ? 'rectangular' : _props$overlap,\n        _props$showZero = props.showZero,\n        showZero = _props$showZero === void 0 ? false : _props$showZero,\n        _props$variant = props.variant,\n        variantProp = _props$variant === void 0 ? 'standard' : _props$variant,\n        theme = props.theme,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    badgeContent: badgeContentProp,\n    max: maxProp,\n    overlap: overlapProp,\n    variant: variantProp\n  });\n  let invisible = invisibleProp;\n\n  if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {\n    invisible = true;\n  }\n\n  const _ref = invisible ? prevProps : props,\n        _ref$anchorOrigin = _ref.anchorOrigin,\n        anchorOrigin = _ref$anchorOrigin === void 0 ? anchorOriginProp : _ref$anchorOrigin,\n        badgeContent = _ref.badgeContent,\n        _ref$max = _ref.max,\n        max = _ref$max === void 0 ? maxProp : _ref$max,\n        _ref$overlap = _ref.overlap,\n        overlap = _ref$overlap === void 0 ? overlapProp : _ref$overlap,\n        _ref$variant = _ref.variant,\n        variant = _ref$variant === void 0 ? variantProp : _ref$variant;\n\n  const ownerState = _extends({}, props, {\n    anchorOrigin,\n    badgeContent,\n    classes: classesProp,\n    invisible,\n    max,\n    overlap,\n    variant\n  });\n\n  let displayValue = '';\n\n  if (variant !== 'dot') {\n    displayValue = badgeContent > max ? \"\".concat(max, \"+\") : badgeContent;\n  }\n\n  const classes = useUtilityClasses(ownerState);\n  const Root = components.Root || component;\n  const rootProps = componentsProps.root || {};\n  const Badge = components.Badge || 'span';\n  const badgeProps = componentsProps.badge || {};\n  return (\n    /*#__PURE__*/\n    _jsxs(Root, _extends({}, rootProps, !isHostComponent(Root) && {\n      as: component,\n      ownerState: _extends({}, ownerState, rootProps.ownerState),\n      theme\n    }, {\n      ref: ref\n    }, other, {\n      className: clsx(classes.root, rootProps.className, className),\n      children: [children,\n      /*#__PURE__*/\n      _jsx(Badge, _extends({}, badgeProps, !isHostComponent(Badge) && {\n        ownerState: _extends({}, ownerState, badgeProps.ownerState),\n        theme\n      }, {\n        className: clsx(classes.badge, badgeProps.className),\n        children: displayValue\n      }))]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If `true`, the badge is invisible.\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Wrapped shape the badge should overlap.\n   * @default 'rectangular'\n   */\n  overlap: PropTypes.oneOf(['circular', 'rectangular']),\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default BadgeUnstyled;","map":null,"metadata":{},"sourceType":"module"}